字符串的处理利器：正则表达式


用途：
1、字符串（字符）匹配
2、字符串查找
3、字符串替换

例如：
1、IP地址是否正确
2、从网页中揪出Email地址
3、从网页中揪出链接

类：
java.lang.String
java.util.regex.Pattern[模式]
java.util.regex.Matcher[结果]





正则表达式的构造摘要 
  
字符 
x 字符 x 
\\ 反斜线字符 
\0n 带有八进制值 0 的字符 n (0 <= n <= 7) 
\0nn 带有八进制值 0 的字符 nn (0 <= n <= 7) 
\0mnn 带有八进制值 0 的字符 mnn（0 <= m <= 3、0 <= n <= 7） 
\xhh 带有十六进制值 0x 的字符 hh 
\uhhhh 带有十六进制值 0x 的字符 hhhh 
\t 制表符 ('\u0009') 
\n 新行（换行）符 ('\u000A') 
\r 回车符 ('\u000D') 
\f 换页符 ('\u000C') 
\a 报警 (bell) 符 ('\u0007') 
\e 转义符 ('\u001B') 
\cx 对应于 x 的控制符 
  
字符类 
[abc] a、b 或 c（简单类） 
[^abc] 任何字符，除了 a、b 或 c（否定） 
[a-zA-Z] a 到 z 或 A 到 Z，两头的字母包括在内（范围） 
[a-d[m-p]] a 到 d 或 m 到 p：[a-dm-p]（并集） 
[a-z&&[def]] d、e 或 f（交集） 
[a-z&&[^bc]] a 到 z，除了 b 和 c：[ad-z]（减去） 
[a-z&&[^m-p]] a 到 z，而非 m 到 p：[a-lq-z]（减去） 
  
预定义字符类 
. 任何字符（与行结束符可能匹配也可能不匹配） 
\d 数字：[0-9] 
\D 非数字： [^0-9] 
\s 空白字符：[ \t\n\x0B\f\r] 
\S 非空白字符：[^\s] 
\w 单词字符：[a-zA-Z_0-9] 
\W 非单词字符：[^\w] 


//简单认识正则表达式的概念
匹配：
p("abc".matches("..."));
解释"."：代表一个字符


替换
p("a8729a".replaceAll("\\d", "-"));
"\\d":代表的是一个数字


模式匹配（速度快）：
Pattern p = Pattern.compile("[a-z]{3}");
Matcher m = p.matcher("fgh");//Matcher匹配器
p(m.matches());

p("fgha".matches("[a-z]{3}"));



//初步认识. * + ?
p("a".matches("."));//true
p("aa".matches("aa"));//true
p("aaaa".matches("a*"));//"*"号代表匹配0个或多个字符//true
p("aaaa".matches("a+"));//"+"号代表匹配1个或多个字符//true
p("".matches("a*"));//false
p("aaaa".matches("a?"));//"？"号代表匹配0个或1个字符//true
p("".matches("a?"));//false
p("a".matches("a?"));//true

p("214523145234532".matches("\\d{3,100}"));//true
p("192.168.0.aaa".matches("\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}"));\\false
p("192".matches("[0-2][0-9][0-9]"));



//范围
p("a".matches("[abc]"));
p("a".matches("[^abc]"));//除了abc以外的
p("A".matches("[a-zA-Z]"));
p("A".matches("[a-z]|[A-Z]"));
p("A".matches("[a-z[A-Z]]"));
p("R".matches("[A-Z&&[RFG]]"));


//^  匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\n' 或 '\r' 之后的位置。 

//$  匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 之前的位置。 

//*  匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。 

//+  匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。 

//?  匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 {0,1}。 
