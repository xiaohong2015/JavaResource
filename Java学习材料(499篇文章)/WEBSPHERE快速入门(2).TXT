作者：easyinfonet
email: easyinfonet@sina.com.cn
日期：2001-2-16 11:19:33
1.3 Web基本知识
Web（World Wide Web、万维网）技术是电子商务的核心技术。Web的思想可追溯到Tim Berners-Lee于1989年3月在CERN (Centre  European pour la Recherche Nucleaire，或称European Laboratory for Particle Physics、欧洲粒子物理实验室)写的一个关于信息管理的项目建议书（Information Management: A Proposal）。该建议书提出了分布式超文本系统的设想，旨在将CERN已有的几个信息服务器一体化，并提供一个简单的用户界面来存取各种形式的信息。1990年Web浏览器和Web服务器使用面向对象技术相继在CERN实现。Berners-Lee 和他的合作伙伴成功引入了构成Web体系结构的基本元素：Web服务器、Web浏览器、浏览器与服务器之间的通信协议HTTP(Hypertext Transfer Protocol 、超文本传输协议)、写Web文档的语言HTML（Hypertext Markup Language、超文本标记语言)、以及用来标识Web上资源的URL（Universal Resource Locator 、统一资源定位器)。1993年，美国伊利诺斯大学国家超级计算应用中心NCSA (National Center for Supercomputing Applications)的Marc Andreesen及其合作者发布了称为Mosaic的浏览器，这是第一个较健壮的易用的浏览器，它具有友善的图形用户界面。从此，Web迅速成长为全球范围内的信息宝库。1994 年，W3 联盟在Tim Berners-Lee的领导下成立，该组织通过制定技术规范与提供参考软件来发展Web的技术标准并促进Web产品之间的互操作性。
    URL（Universal Resource Locator 、统一资源定位器)用来唯一标识Web上的资源，包括Web 页面、图象文件(如gif 格式文件和jpeg格式文件)、音频文件(如au格式)、视频文件 (如mpeg格式文件)。URL的格式为：协议://主机名<:端口号>/标识符(例如 http://www.seu.edu.cn:80/index.html )。协议可以是HTTP、HTTPS（安全的超文本传输协议）、FTP；主机名用来标识被请求的服务器；端口通常为不同协议保留，例如FTP和HTTP守护进程侦听不同的端口，FTP缺省的端口号为21，HTTP缺省的端口号为80；标识符说明被请求的是什么，可以是文件名（含路径）或一个应用关键字 (如/cgi-bin/和/servlet/)加上一些信息（如一个脚本的名字和servlet的名字）。例如，用户键入URL格式的地址(例如 http://www.seu.edu.cn:80/index.html )；浏览器请求主机www.seu.edu.cn 在80端口提供的HTTP服务，并要求取得该服务器上的index.html文件；服务器接受请求，取得该文件；服务器把文件返回浏览器，并告诉浏览器这是一个HTML文件；浏览器在显示器上显示这个页面。在浏览器和web服务器之间使用的协议是HTTP。
    HTTP（Hyper Text Transfer Protocol、超文本传输协议)是用来在互连网上传输文档的协议，它是Web上最常用也是最重要的协议，也是Web服务器和Web客户（如浏览器）之间传输Web页面的基础。HTTP是建立在TCP/IP之上的应用协议，但并不是面向连接的，而是一种请求/应答（Request/Response）式协议。浏览器通常通过HTTP向Web服务器发送一个HTTP请求，其中包括一个方法、可能的几个头、一个体。常用的方法类型包括：GET（请求一个网页）、POST（传送一个表单中的信息）、PUT（存入这个信息、类似于FTP中的PUT）和DELETE（删除这个信息）。Web服务器接受到HTTP请求之后，执行客户所请求的服务，生成一个HTTP应答返回给客户。HTTP应答有一个状态行、可能的几个头、一个体。在头中可以定义返回文档的内容类型（MIME类型）、Cache控制、失效时间。MIME类型包括：“text/html”（HTML文本）、“image/jpeg”（JPEG图）、“audio/ra”（RealAudio文件）。HTTP本身也在不断完善和发展，目前，常用的是HTTP1.1，它更好地利用TCP的特性，对HTTP1.0作了改进。
HTML (Hypertext Markup Language、超文本标记语言)是Web诞生与发展的要素之一，它旨在使得Web页面能显示在任何HTML使能的浏览器中，而与连网的机器平台无关。HTML并不是一个程序设计语言，而是一个标记语言，它所提供的标记是由SGML（Standard Generalized Markup Language，标准的通用标记语言）定义的。SGML是ISO（国际标准化组织）在1986年推出的一个用来创建标记语言的语言标准，它源自IBM早在1969年开发的GML（Generalized Markup Language），该语言的名称也正好包含了三位创始人姓字的第一个字母，他们分别是Charles F. Goldfarb, Edward Mosher，Raymond Lorie。SGML是一种元语言，即用来定义标记语言的语言，它提供了一种将数据内容与显示分离开来的数据表示方法，使得数据独立于机器平台和处理程序。这些特性促使Tim Berners-Lee 采用SGML来创建称之为HTML的标记语言。1993年形成HTML 1.0，以后不断完善，HTML 4.0发表于1997年。特别需要指出的是HTML提供的链接机制是Web的本质特性之一。但是，HTML更多的关注Web浏览器如何在页面上安排文本、图象和按钮等，过多地考虑外观使其缺乏对结构化数据的表示能力。另外，HTML中有限的标记不能满足很多Web应用的需要，如基于Web的大型出版系统和新一代的电子商务，而为各种应用需要不断地往HTML中增加标记显然不是最终的解决方法，究其原因是HTML缺乏可扩展性。解决方案应该是简化SGML使之能应用到Web上。为此，从1996年开始，W3C（World Wide Web Consortium） 的一个工作组在Jon Bosak的领导下致力于设计一个超越HTML能力范围的新语言，这个语言后来被命名为XML（Extensible Markup Language，可扩展标记语言）。1998年2月，W3C发布了XML 1.0作为其推荐标准。现在，W3C已经用XML设计出一个与HTML4.01功能等价的语言，称为XHTML1.0 （Extensible HyperText Markup Language）。
Web客户通常指的是Web浏览器，如Netscape Navigator和Microsoft Internet Explorer。这种浏览器能理解多种协议，如HTTP、HTTPS、FTP；也能理解多种文档格式，如text、HTML、JPEG（一种图象文件格式）、XML(有的尚未支持)；也具备根据对象类型调用外部应用的功能。需要指出的是HTML文档中的链接在Web浏览器中通常以带下划线的方式显示，用户点击某个链接就能浏览到所链接的Web资源，这也是Web的魅力所在。
Web服务器（或称HTTP服务器）提供HTTP服务。本来Web服务器只提供“静态”内容，即返回在URL里指定的文件的内容，一般具备将URL名映射到文件名的功能，并能实施某种安全策略。现在，可采用CGI（通用网关接口）技术或Java Servlet技术从一个运行的程序里得出“动态”内容，可以采用应用关键字（如/cgi-bin/和/servlet/）来组织脚本文件和Servlet文件，而且现在的Web服务器通常还具备连接数据库的功能，这些形成了Web应用的出现。通常，一个Web服务器还提供其它服务，如FTP服务。有的还可作为代理服务器。一个代理服务器是一个可以从别的服务器上为它的客户取文件的服务器。代理服务器可以通过缓存应答（页面）使得响应时间更快，也可以降低网络流量，对外能隐藏内部网信息。
总之，URL、HTTP、HTML(以及XML)、Web服务器和Web浏览器是构成Web的五大要素。Web的本质内涵是一个建立在Internet基础上的网络化超文本信息传递系统，而Web的外延是不断扩展的信息空间。Web的基本技术在于对Web资源的标识机制（如URL）、应用协议（如HTTP和HTTPS）、数据格式（如HTML和XML）。这些技术的发展日新月异，同时新的技术不断涌现，因此Web的发展前景不可限量。
1.4 Java 简介
现代技术的发展，尤其是网络技术，给现代企业带来了许多新的机遇和挑战，如改善客户服务、全球化和信息检索等，这些在技术上反映为信息的获取、系统管理、系统集成、新技术的开发、Internet、Intranet等等与商业的结合。而这些要求一个随处可用的开放的结构和在不同的平台之间低成本的信息传递方式，Java正好满足这些要求。
Java是由Sun Microsystems公司于1995年5月推出的Java程序设计语言（以下简称Java语言）和Java平台的总称。用Java实现的HotJava浏览器（支持Java applet）显示了Java的魅力：跨平台、动感的Web、Internet计算。从此，Java被广泛接受并推动了Web的迅速发展，常用的浏览器现在均支持Java applet。另一方面，Java技术也不断更新。
Java平台由Java虚拟机（Java Virtual Machine）和Java 应用编程接口（Application Programming Interface、简称API）构成。Java 应用编程接口为Java应用提供了一个独立于操作系统的标准接口，可分为基本部分和扩展部分。在硬件或操作系统平台上安装一个Java平台之后，Java应用程序就可运行。现在Java平台已经嵌入了几乎所有的操作系统。这样Java程序可以只编译一次，就可以在各种系统中运行。Java应用编程接口已经从1.1.x版发展到1.2版。目前常用的Java平台基于Java1.2。
Java语言是一个支持网络计算的面向对象程序设计语言。Java语言吸收了Smalltalk语言和C++语言的优点，并增加了其它特性，如支持并发程序设计、网络通信、和多媒体数据控制等。主要特性如下：
1)	Java语言是简单的。Java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用Java。另一方面，Java丢弃了C++ 中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，并提供了自动的废料收集，使得程序员不必为内存管理而担忧。
2)	Java语言是一个面向对象的。Java语言提供类、接口和继承等原语，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）。Java语言全面支持动态绑定，而C++ 语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。
3)	Java语言是分布式的。Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java.net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、 ServerSocket等。Java的RMI(远程方法激活)机制也是开发分布式应用的重要手段。
4)	Java语言是健壮的。Java的强类型机制、异常处理、废料的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。Java的安全检查机制使得Java更具健壮性。
5)	Java语言是安全的。Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。除了Java语言具有的许多安全特性以外，Java对通过网络下载的类具有一个安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类SecurityManager）让Java应用设置安全哨兵。 
6)	Java语言是体系结构中立的。Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件）, 然后可以在实现这个Java平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发。 
7)	Java语言是可移植的。这种可移植性来源于体系结构中立性，另外，Java还严格规定了各个基本数据类型的长度。Java系统本身也具有很强的可移植性，Java编译器是用Java实现的，Java的运行环境是用ANSI C实现的。
8)	Java语言是解释型的。如前所述，Java程序在Java平台上被编译为字节码格式， 然后可以在实现这个Java平台的任何系统中运行。在运行时，Java平台中的Java解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。
9)	Java是高性能的。与那些解释型的高级脚本语言相比，Java的确是高性能的。事实上，Java的运行速度随着JIT(Just-In-Time)编译器技术的发展越来越接近于C++。 
10)	Java语言是多线程的。在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为Thread(Runnable) 的构造子将一个实现了Runnable接口的对象包装成一个线程，其二，从Thread类派生出子类并重写run方法，使用该子类创建的对象即为线程。值得注意的是Thread类已经实现了Runnable接口，因此，任何一个线程均有它的run方法，而run方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。 Java语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为synchronized）。
11)	Java语言是动态的。Java语言的设计目标之一是适应于动态变化的环境。Java程序需要的类能动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java中的类有一个运行时刻的表示，能进行运行时刻的类型检查。

Java语言的优良特性使得Java应用具有无比的健壮性和可靠性，这也减少了应用系统的维护费用。Java对对象技术的全面支持和Java平台内嵌的API能缩短应用系统的开发时间并降低成本。Java的编译一次，到处可运行的特性使得它能够提供一个随处可用的开放结构和在多平台之间传递信息的低成本方式。特别是Java企业应用编程接口（Java Enterprise APIs）为企业计算及电子商务应用系统提供了有关技术和丰富的类库。
1)	JDBC（Java Database Connectivity）提供连接各种关系数据库的统一接口。
2)	EJB(Enterprise JavaBeans)使得开发者方便地创建、部署和管理跨平台的基于组件的企业应用。
3)	Java RMI(Java Remote Method Invocation)用来开发分布式Java应用程序。一个Java对象的方法能被远程Java虚拟机调用。这样，远程方法激活可以发生在对等的两端，也可以发生在客户端和服务器之间，只要双方的应用程序都是用Java写的。
4)	Java IDL(Java Interface Definition Language) 提供与CORBA(Common Object Request Broker Architecture)的无逢的互操作性。这使得Java能集成异构的商务信息资源。
5)	JNDI(Java Naming and Directory Interface)提供从Java平台到的统一的无逢的连接。这个接口屏蔽了企业网络所使用的各种命名和目录服务。
6)	JMAPI（Java Management API）为异构网络上系统、网络和服务管理的开发提供一整套丰富的对象和方法。
7)	JMS(Java Message Service)提供企业消息服务，如可靠的消息队列、发布和订阅通信、以及有关推拉（Push/Pull）技术的各个方面。
8)	JTS(Java transaction Service)提供存取事务处理资源的开放标准，这些事务处理资源包括事务处理应用程序、事务处理管理及监控。

在Java技术中，值得关注的还有JavaBeans，它是一个开放的标准的组件体系结构，它独立于平台，但使用Java语言。一个JavaBean是一个满足JavaBeans规范的Java类，通常定义了一个现实世界的事物或概念。一个JavaBean的主要特征包括属性、方法和事件。通常，在一个支持JavaBeans规范的开发环境（如Sun Java Studio 和IBM VisualAge for Java）中，可以可视地操作JavaBean，也可以使用JavaBean构造出新的JavaBean。JavaBean的优势还在于Java带来的可移植性。现在，EJB (Enterprise JavaBeans) 将JavaBean概念扩展到Java服务端组件体系结构，这个模型支持多层的分布式对象应用。除了JavaBeans，典型的组件体系结构还有DCOM和CORBA，关于这些组件体系结构的深入讨论超出了本书的范围。
第二章 电子商务应用框架
    要转变传统的业务过程，就需要开发和部署电子商务应用系统的一个基础，电子商务应用框架正是这样的一个基础。许多企业希望电子商务应用系统具备下列特征：
1)	基于标准；
2)	以服务器为中心；
3)	可伸缩；
4)	能利用已有的核心系统；
5)	可快速部署和易用；
6)	易管理。
本章介绍的电子商务应用框架能满足企业开发电子商务应用系统的上述需求。所谓一个框架是指一个可复用的设计，表示为一组抽象的元素范例以及元素范例之间合作的接口。框架是有针对性的，如一个用户界面框架只为软件系统的用户界面提供了一个设计，而一个应用框架为整个应用系统提供了一个设计。一个应用框架中的元素范例也可称之为组件。本节介绍的电子商务应用框架基于业界标准；它为开发和部署电子商务应用系统提供了一组完整的服务；它提供的Web应用编程模型定义了Web应用拓扑结构以及使用框架提供的服务来设计Web应用的一个模型。这个框架基于独立于平台和提供商的技术标准，包括关于客户端、应用服务器、网络、数据和基础设施的标准。这些标准使得客户能在任何时候在网络上的任何地方存取有关数据和服务，也使得开发的应用软件只需写一次就能到处运行，并能即插即用各种组件。下面介绍电子商务应用框架的基本系统模型、体系结构和Web应用编程模型。
