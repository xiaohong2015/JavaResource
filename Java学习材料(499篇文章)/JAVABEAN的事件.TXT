作者：jspfuns
日期：2000-8-10 17:34:14
事件处理是JavaBean体系结构的核心之一。通过事件处理机制，可让一些组件作为事件源，发出可被描述环境或其它组件接收的事件。这样，不同的组件就可在构造工具内组合在一起，组件之间通过事件的传递进行通信，构成一个应用。从概念上讲，事件是一种在"源对象"和"监听者对象"之间，某种状态发生变化的传递机制。事件有许多不同的用途，例如在Windows系统中常要处理的鼠标事件、窗口边界改变事件、键盘事件等。在Java和JavaBean中则是定义了一个一般的、可扩充的事件机制，这种机制能够： 

对事件类型和传递的模型的定义和扩充提供一个公共框架，并适合于广泛的应用。
与Java语言和环境有较高的集成度。
事件能被描述环境捕获和点火。
能使其它构造工具采取某种技术在设计时直接控制事件，以及事件源和事件监听者之间的联系。
事件机制本身不依赖于复杂的开发工具。

特别地，还应当：
能够发现指定的对象类可以生成的事件。
能够发现指定的对象类可以观察（监听）到的事件。
提供一个常规的注册机制，允许动态操纵事件源与事件监听者之间的关系。
不需要其它的虚拟机和语言即可实现。
事件源与监听者之间可进行高效的事件传递。
能完成JavaBean事件模型与相关的其它组件体系结构事件模型的中立映射。

3.2.1 概述 

JavaBean事件模型的总体结构图见图3.3,



主要构成有： 事件从事件源到监听者的传递是通过对目标监听者对象的Java方法调用进行的。 对每个明确的事件的发生，都相应地定义一个明确的Java方法。这些方法都集中定义在事件监听者（EventListener）接口中，这个接口要继承java.util.EventListener。 实现了事件监听者接口中一些或全部方法的类就是事件监听者。 伴随着事件的发生，相应的状态通常都封装在事件状态对象中，该对象必须继承自java.util.EventObject。事件状态对象作为单参传递给应响应该事件的监听者方法中。 发出某种特定事件的事件源的标识是：遵从规定的设计格式为事件监听者定义注册方法，并接受对指定事件监听者接口实例的引用。 有时，事件监听者不能直接实现事件监听者接口，或者还有其它的额外动作时，就要在一个源与其它一个或多个监听者之间插入一个事件适配器类的实例，来建立它们之间的联系。 

3.2.2 事件状态对象（Event State Object） 

与事件发生有关的状态信息一般都封装在一个事件状态对象中，这种对象是java.util.EventObject的子类。按设计习惯，这种事件状态对象类的名应以Event结尾。例如： 


public class MouseMovedExampleEvent extends java.util.EventObject

{ protected int x, y；
/*　创建一个鼠标移动事件MouseMovedExampleEvent */
　MouseMovedExampleEvent(java.awt.Component source, Point location) { 
super(source);
x = location.x;
y = location.y;
}
/* 获取鼠标位置*/
public Point getLocation() { 
return new Point(x, y);
}}

3.2.3事件监听者接口（EventListener Interface）与事件监听者 

由于Java事件模型是基于方法调用，因而需要一个定义并组织事件操纵方法的方式。JavaBean中，事件操纵方法都被定义在继承了java.util.EventListener类的EventListener接口中，按规定，EventListener接口的命名要以Listener结尾。任何一个类如果想操纵在EventListener接口中定义的方法都必须以实现这个接口方式进行。这个类也就是事件监听者。例如：


/*先定义了一个鼠标移动事件对象*/
　　public class MouseMovedExampleEvent extends java.util.EventObject {
　　 // 在此类中包含了与鼠标移动事件有关的状态信息
　　　　 ... 
　　}
　　/*定义了鼠标移动事件的监听者接口*/
　　interface MouseMovedExampleListener extends java.util.EventListener { 
/*在这个接口中定义了鼠标移动事件监听者所应支持的方法*/
void mouseMoved(MouseMovedExampleEvent mme);
}

在接口中只定义方法名，方法的参数和返回值类型。如：上面接口中的mouseMoved方法的具体实现是在下面的ArbitraryObject类中定义的。 

class ArbitraryObject implements MouseMovedExampleListener { 
　　　public void mouseMoved(MouseMovedExampleEvent mme) 
　 { ... } 
｝
ArbitraryObject就是MouseMovedExampleEvent事件的监听者。 
3.2.4 事件监听者的注册与注销 

为了各种可能的事件监听者把自己注册入合适的事件源中，建立源与事件监听者间的事件流，事件源必须为事件监听者提供注册和注销的方法。在前面的bound属性介绍中已看到了这种使用过程，在实际中，事件监听者的注册和注销要使用标准的设计格式： 


public void add< ListenerType>(< ListenerType> listener)；
public void remove< ListenerType>(< ListenerType> listener)；

例如：
　　首先定义了一个事件监听者接口：
public interface ModelChangedListener extends java.util.EventListener { 
void modelChanged(EventObject e); 
}

接着定义事件源类：
public abstract class Model { 
private Vector listeners = new Vector(); // 定义了一个储存事件监听者的数组

/*上面设计格式中的< ListenerType>在此处即是下面的ModelChangedListener*/

public synchronized void addModelChangedListener(ModelChangedListener mcl)
　　{ listeners.addElement(mcl); }//把监听者注册入listeners数组中
public synchronized void removeModelChangedListener(ModelChangedListener mcl)
　　　　{ listeners.removeElement(mcl); //把监听者从listeners中注销
　　　　｝
　　/*以上两个方法的前面均冠以synchronized，是因为运行在多线程环境时，可能同时有几个对象同时要进行注册和注销操作，使用synchronized来确保它们之间的同步。开发工具或程序员使用这两个方法建立源与监听者之间的事件流*/ 

　　protected void notifyModelChanged() {/**事件源使用本方法通知监听者发生了modelChanged事件*/
　　　 Vector l; 
　　　　EventObject e = new EventObject(this);
　　　　/* 首先要把监听者拷贝到l数组中，冻结EventListeners的状态以传递事件。这样来确保在事件传递到所有监听者之前，已接收了事件的目标监听者的对应方法暂不生效。*/ 
　　　　synchronized(this) { 
　　　　　　l = (Vector)listeners.clone(); 
　　　　}
　　　　for (int i = 0; i < l.size(); i++) {
　　　　 /* 依次通知注册在监听者队列中的每个监听者发生了modelChanged事件，
　　　　 并把事件状态对象e作为参数传递给监听者队列中的每个监听者*/
((ModelChangedListener)l.elementAt(i)).modelChanged(e); 
　　　　}
　　　 } 
　　　｝

在程序中可见事件源Model类显式地调用了接口中的modelChanged方法，实际是把事件状态对象e作为参数，传递给了监听者类中的modelChanged方法。 
3.2.5适配类 

适配类是Java事件模型中极其重要的一部分。在一些应用场合，事件从源到监听者之间的传递要通过适配类来"转发"。例如：当事件源发出一个事件，而有几个事件监听者对象都可接收该事件，但只有指定对象做出反应时，就要在事件源与事件监听者之间插入一个事件适配器类，由适配器类来指定事件应该是由哪些监听者来响应。



图3.4是适配类模型的框架： 从上图中可见，适配类成为了事件监听者，事件源实际是把适配类作为监听者注册入监听者队列中，而真正的事件响应者并未在监听者队列中，事件响应者应做的动作由适配类决定。目前绝大多数的开发工具在生成代码时，事件处理都是通过适配类来进行的。 