作者：jeru
日期：2000-12-9 19:00:08
本简介是从《JDBCTM Database Access from JavaTM: A Tutorial and Annotated Reference 》这本书中摘引来的。
JavaSoft 目前正在准备这本书。这是一本教程，同时也是 JDBC 的重要参考手册，它将作为 Java 系列的组成部份在 
1997 年春季由 Addison-Wesley 出版公司出版。 


1.1 什么是 JDBCTM？ 
JDBCTM 是一种用于执行 SQL 语句的 JavaTM API（有意思的是，JDBC 本身是个商标名而不是一个缩写字；然而，JDBC 
常被认为是代表 “Java 数据库连接 (Java Database Connectivity)”）。它由一组用 Java 编程语言编写的类和接口
组成。JDBC 为工具/数据库开发人员提供了一个标准的 API，使他们能够用纯 Java API 来编写数据库应用程序。 

有了 JDBC，向各种关系数据库发送 SQL 语句就是一件很容易的事。换言之，有了 JDBC API，就不必为访问 Sybase 数
据库专门写一个程序，为访问 Oracle 数据库又专门写一个程序，为访问 Informix 数据库又写另一个程序，等等。您只
需用 JDBC API 写一个程序就够了，它可向相应数据库发送 SQL 语句。而且，使用 Java 编程语言编写的应用程序，就
无须去忧虑要为不同的平台编写不同的应用程序。将 Java 和 JDBC 结合起来将使程序员只须写一遍程序就可让它在任何
平台上运行。 

Java 具有坚固、安全、易于使用、易于理解和可从网络上自动下载等特性，是编写数据库应用程序的杰出语言。所需要的
只是 Java 应用程序与各种不同数据库之间进行对话的方法。而 JDBC 正是作为此种用途的机制。 

JDBC 扩展了 Java 的功能。例如，用 Java 和 JDBC API 可以发布含有 applet 的网页，而该 applet 使用的信息可能来
自远程数据库。企业也可以用 JDBC 通过 Intranet 将所有职员连到一个或多个内部数据库中（即使这些职员所用的计算机
有 Windows、 Macintosh 和 UNIX 等各种不同的操作系统）。随着越来越多的程序员开始使用 Java 编程语言，对从 Java
中便捷地访问数据库的要求也在日益增加。 

MIS 管理员们都喜欢 Java 和 JDBC 的结合，因为它使信息传播变得容易和经济。企业可继续使用它们安装好的数据库，并
能便捷地存取信息，即使这些信息是储存在不同数据库管理系统上。新程序的开发期很短。安装和版本控制将大为简化。程
序员可只编写一遍应用程序或只更新一次，然后将它放到服务器上，随后任何人就都可得到最新版本的应用程序。对于商务
上的销售信息服务， Java 和 JDBC 可为外部客户提供获取信息更新的更好方法。 


1.1.1 JDBC 的用途是什么？ 
简单地说，JDBC 可做三件事： 



与数据库建立连接， 
发送 SQL 语句， 
处理结果。 


下列代码段给出了以上三步的基本示例： 

Connection con = DriverManager.getConnection ( 
"jdbc:odbc:wombat", "login", "password"); 
Statement stmt = con.createStatement(); 
ResultSet rs = stmt.executeQuery("SELECT a, b, c FROM Table1"); 
while (rs.next()) { 
int x = rs.getInt("a"); 
String s = rs.getString("b"); 
float f = rs.getFloat("c"); 
} 


1.1.2 JDBC 是一种低级 API ，是高级 API 的基础 
JDBC 是个“低级”接口，也就是说，它用于直接调用 SQL 命令。在这方面它的功能极佳，并比其它的数据库连接 API 易
于使用，但它同时也被设计为一种基础接口，在它之上可以建立高级接口和工具。高级接口是“对用户友好的”接口，它使
用的是一种更易理解和更为方便的 API，这种 API 在幕后被转换为诸如 JDBC 这样的低级接口。在编写本文时，正在开发
两种基于 JDBC 的高级 API： 


一种用于 Java 的嵌入式 SQL。至少已经有一个提供者计划编写它。DBMS 实现 SQL：一种专门设计来与数据库联合使用的
语言。JDBC 要求 SQL 语句必须作为 String 传给 Java 方法。相反，嵌入式 SQL 预处理器允许程序员将 SQL 语句直接与
Java 混在一起使用。例如，可在 SQL 语句中使用 Java 变量，用以接受或提供 SQL 值。然后，嵌入式 SQL 预处理器将通
过 JDBC 调用把这种 Java/SQL 的混合物转换为 Java。 
关系数据库表到 Java 类的直接映射。JavaSoft 和其它提供者都声称要实现该 API。在这种“对象/关系”映射中，表中的
每行对应于类的一个实例，而每列的值对应于该实例的一个属性。于是，程序员可直接对 Java 对象进行操作；存取数据所
需的 SQL 调用将在“掩盖下”自动生成。此外还可提供更复杂的映射，例如将多个表中的行结合进一个 Java 类中。 
随着人们对 JDBC 的兴趣日益增涨，越来越多的开发人员一直在使用基于 JDBC 的工具，以使程序的编写更加容易。程序员
也一直在编写力图使最终用户对数据库的访问变得更为简单的应用程序。例如，应用程序可提供一个选择数据库任务的菜单。
任务被选定后，应用程序将给出提示及空白供填写执行选定任务所需的信息。所需信息输入后，应用程序将自动调用所需的
SQL 命令。在这样一种程序的协助下，即使用户根本不懂 SQL 的语法，也可以执行数据库任务。 


1.1.3 JDBC 与 ODBC 和其它 API 的比较 
目前，Microsoft 的 ODBC（开放式数据库连接）API 可能是使用最广的、用于访问关系数据库的编程接口。它能在几乎所
有平台上连接几乎所有的数据库。为什么 Java 不使用 ODBC？ 

对这个问题的回答是：Java 可以使用 ODBC，但最好是在 JDBC 的帮助下以 JDBC-ODBC 桥的形式使用，这一点我们稍后再
说。现在的问题已变成：“为什么需要 JDBC”？ 回答如下： 


ODBC 不适合直接在 Java 中使用，因为它使用 C 语言接口。从 Java 调用本地 C 代码在安全性、实现、坚固性和程序的
自动移植性方面都有许多缺点。 
从 ODBC C API 到 Java API 的字面翻译是不可取的。例如，Java 没有指针，而 ODBC 却对指针用得很广泛（包括很容易
出错的指针 "void *"）。您可以将 JDBC 想象成被转换为面向对象接口的 ODBC，而面向对象的接口对 Java 程序员来说较
易于接收。 
ODBC 很难学。它把简单和高级功能混在一起，而且即使对于简单的查询，其选项也极为复杂。相反，JDBC 尽量保证简单功
能的简便性，而同时在必要时允许使用高级功能。 
启用“纯 Java ”机制需要象 JDBC 这样的 Java API。如果使用 ODBC，就必须手动地将 ODBC 驱动程序管理器和驱动程序
安装在每台客户机上。如果完全用 Java 编写 JDBC 驱动程序则 JDBC 代码在所有 Java 平台上（从网络计算机到大型机）
都可以自动安装、移植并保证安全性。 
总之，JDBC API 对于基本的 SQL 抽象和概念是一种自然的 Java 接口。它建立在 ODBC 上而不是从零开始。因此，熟悉 
ODBC 的程序员将发现 JDBC 很容易使用。JDBC 保留了 ODBC 的基本设计特征；事实上，两种接口都基于 X/Open SQL CLI
（调用级接口）。它们之间最大的区别在于：JDBC 以 Java 风格与优点为基础并进行优化，因此更加易于使用。 

最近，Microsoft 又引进了 ODBC 之外的新 API： RDO、 ADO 和 OLE DB。这些设计在许多方面与 JDBC 是相同的，即它们
都是面向对象的数据库接口且基于可在 ODBC 上实现的类。但在这些接口中，我们未看见有特别的功能使我们要转而选择它
们来替代 ODBC，尤其是在 ODBC 驱动程序已建立起较为完善的市场的情况下。它们最多也就是在 ODBC 上加了一种装饰而
已。这并不是说 JDBC 不需要从其最初的版本再发展了；然而，我们觉得大部份的新功能应归入诸如前一节中所述的对象/
关系映射和嵌入式 SQL 这样的高级 API。 


1.1.4 两层模型和三层模型 
JDBC API 既支持数据库访问的两层模型，同时也支持三层模型。 

在两层模型中，Java applet 或应用程序将直接与数据库进行对话。这将需要一个 JDBC 驱动程序来与所访问的特定数据库
管理系统进行通讯。用户的 SQL 语句被送往数据库中，而其结果将被送回给用户。数据库可以位于另一台计算机上，用户
通过网络连接到上面。这就叫做客户机/服务器配置，其中用户的计算机为客户机，提供数据库的计算机为服务器。网络可
以是 Intranet（它可将公司职员连接起来），也可以是 Internet。 





在三层模型中，命令先是被发送到服务的“中间层”，然后由它将 SQL 语句发送给数据库。数据库对 SQL 语句进行处理并
将结果送回到中间层，中间层再将结果送回给用户。MIS 主管们都发现三层模型很吸引人，因为可用中间层来控制对公司数
据的访问和可作的的更新的种类。中间层的另一个好处是，用户可以利用易于使用的高级 API，而中间层将把它转换为相应
的低级调用。最后，许多情况下三层结构可提供一些性能上的好处。 




到目前为止，中间层通常都用 C 或 C++ 这类语言来编写，这些语言执行速度较快。然而，随着最优化编译器（它把 Java
字节代码转换为高效的特定于机器的代码）的引入，用 Java 来实现中间层将变得越来越实际。这将是一个很大的进步，它
使人们可以充分利用 Java 的诸多优点（如坚固、多线程和安全等特征）。JDBC 对于从 Java 的中间层来访问数据库非常
重要。 


1.1.5 SQL 的一致性 
结构化查询语言 (SQL) 是访问关系数据库的标准语言。困难之处在于：虽然大多数的 DBMS （数据库管理系统）对其基本
功能都使用了标准形式的 SQL，但它们却不符合最近为更高级的功能定义的标准 SQL 语法或语义。例如，并非所有的数据
库都支持储存程序或外部连接，那些支持这一功能的数据库又相互不一致。人们希望 SQL 中真正标准的那部份能够进行扩
展以包括越来越多的功能。但同时 JDBC API 又必须支持现有的 SQL。 

JDBC API 解决这个问题的一种方法是允许将任何查询字符串一直传到所涉及的 DBMS 驱动程序上。这意味着应用程序可以
使用任意多的 SQL 功能，但它必须冒这样的风险：有可能在某些 DBMS 上出错。事实上，应用程序查询甚至不一定要是 
SQL，或者说它可以是个为特定的 DBMS 设计的 SQL 的专用派生物（例如，文档或图象查询）。 

JDBC 处理 SQL 一致性问题的第二种方法是提供 ODBC 风格的转义子句。这将在 4.1.5 节“语句对象中的 SQL 转义语法”
中讨论。 

转义语法为几个常见的 SQL 分歧提供了一种标准的 JDBC 语法。例如，对日期文字和已储存过程的调用都有转义语法。 

对于复杂的应用程序，JDBC 用第三种方法来处理 SQL 的一致性问题。它利用 DatabaseMetaData 接口来提供关于 DBMS 的
描述性信息，从而使应用程序能适应每个 DBMS 的要求和功能。 

由于 JDBC API 将用作开发高级数据库访问工具和 API 的基础 API，因此它还必须注意其所有上层建筑的一致性。“符合 
JDBC 标准TM" 代表用户可依赖的 JDBC 功能的标准级别。要使用这一说明，驱动程序至少必须支持 ANSI SQL-2 Entry 
Level（ANSI SQL-2 代表美国国家标准局 1992 年所采用的标准。Entry Level 代表 SQL 功能的特定清单）。驱动程序开
发人员可用 JDBC API 所带的测试工具包来确定他们的驱动程序是否符合这些标准。 

“符合 JDBC 标准TM” 表示提供者的 JDBC 实现已经通过了 JavaSoft 提供的一致性测试。这些一致性测试将检查 JDBC 
API 中定义的所有类和方法是否都存在，并尽可能地检查程序是否具有 SQL Entry Level 功能。当然，这些测试并不完全，
而且 JavaSoft 目前也无意对各提供者的实现进行标级。但这种一致性定义的确可对 JDBC 实现提供一定的可信度。随着越
来越多的数据库提供者、连接提供者、Internet 提供者和应用程序编程员对 JDBC API 的接受，JDBC 也正迅速成为 Java 
数据库访问的标准。 


1.2 JDBC 产品 
在编写本文时，有几个基于 JDBC 的产品已开发完毕或正在开发中。当然，本节中的信息将很快成为过时信息。因此，有
关最新的信息，请查阅 JDBC 的网站，可通过从以下 URL 开始浏览找到： 

http://java.sun.com/products/jdbc 


1.2.1 JavaSoft 框架 
JavaSoft 提供三种 JDBC 产品组件，它们是 Java 开发工具包 (JDK) 的组成部份： 


JDBC 驱动程序管理器， 


JDBC 驱动程序测试工具包，和 


JDBC-ODBC 桥。 


JDBC 驱动程序管理器是 JDBC 体系结构的支柱。它实际上很小，也很简单；其主要作用是把 Java 应用程序连接到正确的
JDBC 驱动程序上，然后即退出。 

JDBC 驱动程序测试工具包为使 JDBC 驱动程序运行您的程序提供一定的可信度。只有通过 JDBC 驱动程序测试包的驱动程
序才被认为是符合 JDBC 标准TM 的。 

JDBC-ODBC 桥使 ODBC 驱动程序可被用作 JDBC 驱动程序。它的实现为 JDBC 的快速发展提供了一条途径，其长远目标提
供一种访问某些不常见的 DBMS（如果对这些不常见的 DBMS 未实现 JDBC） 的方法。 





1.2.2 JDBC 驱动程序的类型 
我们目前所知晓的 JDBC 驱动程序可分为以下四个种类： 


JDBC-ODBC 桥加 ODBC 驱动程序：JavaSoft 桥产品利用 ODBC 驱动程序提供 JDBC 访问。注意，必须将 ODBC 二进制代码
（许多情况下还包括数据库客户机代码）加载到使用该驱动程序的每个客户机上。因此，这种类型的驱动程序最适合于企业
网（这种网络上客户机的安装不是主要问题），或者是用 Java 编写的三层结构的应用程序服务器代码。 
本地 API - 部份用 Java 来编写的驱动程序： 这种类型的驱动程序把客户机 API 上的 JDBC 调用转换为 Oracle、 
Sybase、Informix、DB2 或其它 DBMS 的调用。注意，象桥驱动程序一样，这种类型的驱动程序要求将某些二进制代码加载
到每台客户机上。 
JDBC 网络纯 Java 驱动程序：这种驱动程序将 JDBC 转换为与 DBMS 无关的网络协议，之后这种协议又被某个服务器转换
为一种 DBMS 协议。这种网络服务器中间件能够将它的纯 Java 客户机连接到多种不同的数据库上。所用的具体协议取决于
提供者。通常，这是最为灵活的 JDBC 驱动程序。有可能所有这种解决方案的提供者都提供适合于 Intranet 用的产品。为
了使这些产品也支持 Internet 访问，它们必须处理 Web 所提出的安全性、通过防火墙的访问等方面的额外要求。几家提
供者正将 JDBC 驱动程序加到他们现有的数据库中间件产品中。 
本地协议纯 Java 驱动程序：这种类型的驱动程序将 JDBC 调用直接转换为 DBMS 所使用的网络协议。这将允许从客户机机
器上直接调用 DBMS 服务器，是 Intranet 访问的一个很实用的解决方法。由于许多这样的协议都是专用的，因此数据库提
供者自己将是主要来源，有几家提供者已在着手做这件事了。 
最后，我们预计第 3、4 类驱动程序将成为从 JDBC 访问数据库的首选方法。第 1、2 类驱动程序在直接的纯 Java 驱动程
序还没有上市前将会作为过渡方案来使用。对第 1、2 类驱动程序可能会有一些变种（下表中未列出），这些变种要求有连
接器，但通常这些是更加不可取的解决方案。第 3、4 类驱动程序提供了 Java 的所有优点，包括自动安装（例如，通过使
用 JDBC 驱动程序的 applet applet来下载该驱动程序）。 

下表显示了这 4 种类型的驱动程序及其属性： 


驱动程序种类 纯 JAVA？ 网络协议 
1 - JDBC-OCBC 桥 非 直接 
2 - 基于本地 API 的 非 直接 
3 - JDBC 网络的 是 要求连接器 
4 - 基于本地协议的 是 直接 



1.2.3 JDBC 驱动程序的获取 
在编写本文时，已有几十个属于种类的驱动程序，即可与 Javasoft 桥联合使用的 1: ODBC 驱动程序的驱动程序。有大约
十多个属于种类 2 的驱动程序是以 DBMS 的本地 API 为基础编写的。只有几个属于种类 3 的驱动程序。目前至少有 2 个
属于种类 4 的驱动程序，但到 1997 年底，我们预计主要的 DBMS 都会有种类 4 的驱动程序。 

要获取关于驱动程序的最新信息，请查阅 JDBC 的网站，其网址为： http:// java.sun.com/products/jdbc。提供第 3 种
驱动程序的首批提供者是 SCO、Open Horizon、Visigenic 和 WebLogic。JavaSoft 和数据库连接的领先提供者 Intersolv
合作研制了 JDBC-ODBC 桥和 JDBC 驱动程序测试工具包。 


1.2.4 其它产品 
各种 JDBC 应用程序的开发工具正在开发中。请注意查阅 JavaSoft 网页以得到更新信息。 

