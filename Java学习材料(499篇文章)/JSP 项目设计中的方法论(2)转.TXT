作者：运气
email: webmaster@chinaspx.com
日期：6/27/2001 12:23:34 PM
设计原则

虽然在设计上设置过多刚性的原则是有害的，但是这里我们还是提出一些可以遵循的基本原则。

避免成为使用新技术的群体。一定要等到技术和产品的支持信息成熟了再考虑。但是如何判断一个技术是否足够成熟呢？看看在Internet上的支持信息的丰富程度和深度。一个新的工具，只有在你可以很容易地找到其帮助信息的时候才是好的。 
如果你不得不使用比较新的技术，记住一定要准备有后备的方案，以便在新技术实施中出现问题的时候使用。我的感觉是新技术在你项目的关键点上有大概50%的机会会出问题。从一开始就准备好后备的方案可以避免日后问题扩大。在使用新技术的时候，一定要在项目的早期使用，以争取更多的时间对其可行性进行评估。 
保证用户的技术水平可以使用你的项目中的各种技术，例如如果用户使用的是3.x版本的浏览器，你就不要采用客户端的XML/XSL。当然，你还是可以使用服务器端的XML/XSL，因为用户不会因此受到影响。 
以满足最小限度的需求为目的，这样做可以防止项目变的臃肿，同时可以加快程序编写速度，也更容易测试。而用户只应该要求他们真正需要的功能。 
在编码的时候，最主要的目标是制作可维护的代码；第二个目标是制作可重用的代码。借助Java，面向对象是我们达到成功的最重要工具。但是也不要完全依赖面向对象技术，借助最简单的模板，函数库或者是良好设计方法也可以很好地对代码进行重用。面向对象只是我们在编程的时候可以选择众多技巧中的一种。 
测试和试用是成功的重要部分。试用是非常重要的部分，一定要给以充足的时间以便有机会对发现的错误进行修正。 
在主要项目完成后，可以给出一个小的第二阶段，在这个阶段中可以将项目中不够完善，没有完全达到预期水准的部分进行修改。 
想想多重项目的概念。一个项目小组经常要面对多个项目。项目人员在不同的项目中，要不断的变换职责，一方面这样的作为为以后的人员使用增加了后备。而且由于每个项目小组成员都不断作新的事情，也减少了人员产生倦怠情绪的可能(这意味着你的项目小组可以长时间保持相对稳定) 
预先作好计划，使多个人可能不断对一段代码进行加工。为了作到这一点，我在不同的项目之间进行代码重用。其实，我们做的不仅仅是代码重用。在每个项目中，都可能有个新的人在使用现有的一部分代码。新的人可能会不断的对这些代码进行修正和优化。因此这些代码可以不断的增加效率，同时出现问题的机会也很少。代码的效率可以得到提高，另外文档也可以不断完善。不仅仅是代码本身可以不断被修改，提高，随着新技术的出现，代码也可以不断应用新的技术，从而得到提高。 
如果可能，尽量使用公开源码 
将JSP的分布式环境变成你的优势。使用客户端脚本来利用客户机的能力。真正依靠数据库的存储进程，将数据处理逻辑集中保存。使用J2EE服务器生成XML和XSL数据模板来产生HTML输出。避免将处理集中在一点，将处理工作分布开来是完成工作最有效的方式。 
避免把太多的逻辑放到一个单一的JSP页中。一个JSP页作的事情越多，当你需要升级或者是修改项目的时候，影响就越大。尽量使每个JSP页只完成一个最基本的小操作。也可以使用Tag和JavaBean库的优势来建立可重用的模块。这些手段有助于使JSP页便于维护。 